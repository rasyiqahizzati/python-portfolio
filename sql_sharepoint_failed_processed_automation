{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: sharepoint_utils in /user_data01/mapr/.local/lib/python3.9/site-packages (2.0)\n",
      "Requirement already satisfied: pandas in /usr/local/lib64/python3.9/site-packages (from sharepoint_utils) (2.1.3)\n",
      "Requirement already satisfied: Office365-REST-Python-Client in /usr/local/lib/python3.9/site-packages (from sharepoint_utils) (2.5.2)\n",
      "Requirement already satisfied: numpy<2,>=1.22.4; python_version < \"3.11\" in /usr/local/lib64/python3.9/site-packages (from pandas->sharepoint_utils) (1.26.2)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.9/site-packages (from pandas->sharepoint_utils) (2.8.2)\n",
      "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.9/site-packages (from pandas->sharepoint_utils) (2023.3)\n",
      "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/site-packages (from pandas->sharepoint_utils) (2023.3.post1)\n",
      "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.9/site-packages (from Office365-REST-Python-Client->sharepoint_utils) (4.8.0)\n",
      "Requirement already satisfied: msal in /usr/local/lib/python3.9/site-packages (from Office365-REST-Python-Client->sharepoint_utils) (1.25.0)\n",
      "Requirement already satisfied: requests in /usr/local/lib/python3.9/site-packages (from Office365-REST-Python-Client->sharepoint_utils) (2.31.0)\n",
      "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/site-packages (from python-dateutil>=2.8.2->pandas->sharepoint_utils) (1.16.0)\n",
      "Requirement already satisfied: cryptography<44,>=0.6 in /usr/local/lib64/python3.9/site-packages (from msal->Office365-REST-Python-Client->sharepoint_utils) (41.0.5)\n",
      "Requirement already satisfied: PyJWT[crypto]<3,>=1.0.0 in /usr/local/lib/python3.9/site-packages (from msal->Office365-REST-Python-Client->sharepoint_utils) (2.8.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/site-packages (from requests->Office365-REST-Python-Client->sharepoint_utils) (2023.11.17)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /user_data01/mapr/.local/lib/python3.9/site-packages (from requests->Office365-REST-Python-Client->sharepoint_utils) (1.26.18)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib64/python3.9/site-packages (from requests->Office365-REST-Python-Client->sharepoint_utils) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/site-packages (from requests->Office365-REST-Python-Client->sharepoint_utils) (3.6)\n",
      "Requirement already satisfied: cffi>=1.12 in /usr/local/lib64/python3.9/site-packages (from cryptography<44,>=0.6->msal->Office365-REST-Python-Client->sharepoint_utils) (1.16.0)\n",
      "Requirement already satisfied: pycparser in /usr/local/lib/python3.9/site-packages (from cffi>=1.12->cryptography<44,>=0.6->msal->Office365-REST-Python-Client->sharepoint_utils) (2.21)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install sharepoint_utils\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "from argparse import ArgumentParser\n",
    "from logger import AppLogger\n",
    "import connectionconf\n",
    "import psycopg2\n",
    "from psycopg2 import sql\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine, sql\n",
    "import urllib.parse\n",
    "from timeit import default_timer as timer\n",
    "from datetime import datetime, timedelta\n",
    "from dateutil import parser, relativedelta\n",
    "import os\n",
    "import re\n",
    "from office365.sharepoint.client_context import ClientContext\n",
    "from office365.runtime.auth.user_credential import UserCredential\n",
    "from office365.runtime.http.request_options import RequestOptions\n",
    "from office365.sharepoint.files.file import File\n",
    "from sharepoint_utils import sharepoint_buildurl\n",
    "import send_email\n",
    "import calendar\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "from office365.runtime.http.request_options import RequestOptions\n",
    "from office365.sharepoint.client_context import ClientContext\n",
    "from office365.sharepoint.files.file import File\n",
    "import json\n",
    "\n",
    "def moveFile(url, name, dir):\n",
    "    try:\n",
    "        file_info = ctx.web.get_file_by_server_relative_path(url).get().execute_query()\n",
    "        file_id = file_info.unique_id\n",
    "        get_file_query_string = \"getFileById('{}')\".format(file_id)\n",
    "        \n",
    "        # Define the destination path\n",
    "        destination_url = dir + \"/\" + name\n",
    "        moveto_url = file_info.serverRelativeUrl + \"?moveto=\" + destination_url + \"&overwrite=true\"\n",
    "        \n",
    "        # Create the request\n",
    "        request = RequestOptions(moveto_url)\n",
    "        request.method = \"POST\"\n",
    "        \n",
    "        # Execute the request\n",
    "        response = ctx.pending_request().execute_request_direct(request)\n",
    "        \n",
    "        # Check if the response is valid JSON\n",
    "        try:\n",
    "            response_json = response.json()\n",
    "        except json.JSONDecodeError:\n",
    "            print(f\"Error: Response is not valid JSON. Response content: {response.text}\")\n",
    "            return\n",
    "        \n",
    "        if response_json.get('error'):\n",
    "            print(f\"Error moving file: {response_json['error']['message']['value']}\")\n",
    "        else:\n",
    "            print(f\"File {name} moved to {dir} successfully.\")\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred while moving the file: {e}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn_detail = {\n",
    "        \"host\": \"10.70.31.118\",\n",
    "        \"port\": 5432,\n",
    "        \"username\": \"pipeline_user\",\n",
    "        \"password\": 's5xfN*mpzy:$=dvC',\n",
    "        \"database\": \"pxl\"\n",
    "        }\n",
    "\n",
    "postgres_engine = create_engine('postgresql+psycopg2://%s:%s@%s:%s/%s' % (\n",
    "        conn_detail['username'],\n",
    "        urllib.parse.quote_plus(conn_detail['password']),\n",
    "        conn_detail['host'],\n",
    "        conn_detail['port'],\n",
    "        conn_detail['database']\n",
    "        ))\n",
    "\n",
    "# Connect to the database\n",
    "conn = postgres_engine.connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "curDate = datetime.now() + relativedelta.relativedelta(hour=0, minute=0, second=0, microsecond=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Establish a connection to the SharePoint site\n",
    "# with_credentials - To authenticate with Sharepoint using the provided username and password.\n",
    "ctx = ClientContext('https://um018.sharepoint.com/sites/ISDBIReportingTeam').with_credentials(UserCredential('bda.reports@u.com.my', 'Nvt4Zp+n'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The main directory where your files are stored (three files are different way from this part)\n",
    "sharepoint_path = '/sites/ISDBIReportingTeam/Shared Documents/Share folder/Test DPAB'\n",
    "\n",
    "#The directory where processed files will be moved\n",
    "sharepoint_path_processed = '/sites/ISDBIReportingTeam/Shared Documents/Share folder/Test DPAB/Processed'\n",
    "\n",
    "#The directory where files that failed processing will be moved\n",
    "sharepoint_path_failed = '/sites/ISDBIReportingTeam/Shared Documents/Share folder/Test DPAB/Failed'\n",
    "\n",
    "#The local directory where files will be downloaded\n",
    "local_path = '/user_data01/mapr/pipeline/uat/output/dpab'\n",
    "\n",
    "#The name of the file to be processed\n",
    "local_filename = 'DPAB Test.xlsx'\n",
    "\n",
    "#The full path to the local file, combining local_path and local_filename\n",
    "local_file = local_path+local_filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reusable function to move file between sharepoint directories\n",
    "def moveFile(url, name, dir):\n",
    "    file_info = ctx.web.get_file_by_server_relative_path(url).get().execute_query()\n",
    "    file_id = file_info.unique_id\n",
    "    get_file_query_string = \"getFileById('{}')\".format(file_id)\n",
    "\n",
    "#Build Query Strings\n",
    "    moveto_query_params = {\"newurl\": dir + \"/\" + name, \"flags\": 1}\n",
    "    moveto_query_string = sharepoint_buildurl(\"moveto\", moveto_query_params)\n",
    "\n",
    "#Construct the Move URL\n",
    "    moveto_url = \"/\".join(\n",
    "        [ctx.service_root_url(), \"web\", get_file_query_string, moveto_query_string]\n",
    "    )\n",
    "\n",
    "#Create and Execute the Request\n",
    "    request = RequestOptions(moveto_url)\n",
    "    request.method = \"POST\"\n",
    "    ctx.pending_request().execute_request_direct(request)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Get the Root Folder\n",
    "root_folder = ctx.web.get_folder_by_server_relative_path(sharepoint_path)\n",
    "\n",
    "# todo this function lists all files in the directory including subdirectories, need to take performance impact into account in future and explore alternate functions.\n",
    "# List all files in the Directory\n",
    "files = root_folder.get_files(True).execute_query()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A pair of matching file name and the final db table name\n",
    "#['file_name','database_table_name']\n",
    "# JPD - Jira Product Discovery\n",
    "categorySeq = [['PBI src Jira', 'pbi_src_jira'], # please change the file name accordingly here\n",
    "               ['PBI src JPD', 'pbi_src_jpd'], # please change the file name accordingly here\n",
    "               ['Release Schedule','release_schedule']] # please change the file name accordingly here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Iterate Over Categories\n",
    "for eachCat in categorySeq:\n",
    "    \n",
    "    # Grab ALL the files with the matching name\n",
    "    matching_files = [\n",
    "        f\n",
    "        for f in files\n",
    "        if eachCat[0] in f.properties[\"Name\"] #search for the files with the matching name\n",
    "        and f.serverRelativeUrl == sharepoint_path + \"/\" + f.name\n",
    "    ]\n",
    "\n",
    "    # Process each matching file\n",
    "    for f in matching_files:\n",
    "        # Download to the local folder\n",
    "        file_url = f.properties[\"ServerRelativeUrl\"]\n",
    "        download_file = os.path.join(\n",
    "            local_path, os.path.basename(file_url)\n",
    "            )\n",
    "        \n",
    "     # Get the year and quarter from the file name \n",
    "        file_name = f.properties[\"Name\"]\n",
    "        pattern = r'_(\\d{4})(Q[1-4])'\n",
    "        match = re.search(pattern, file_name)\n",
    "        \n",
    "    \n",
    "    # Open the local file in write-binary mode\n",
    "    with open(download_file, \"wb\") as local_file:\n",
    "        file = (\n",
    "            ctx.web.get_file_by_server_relative_path(file_url) # Retrives the file from Sharepoint\n",
    "            .download(local_file) #Download the file content to the local file\n",
    "            .execute_query() # Executes the query to perform the download\n",
    "            )\n",
    "\n",
    "    \n",
    "     # Read the Excel file located at download_file into pandas dataframe named 'dpab df'\n",
    "    dpab_df = pd.read_csv(download_file)\n",
    "        \n",
    "    #Verify the file format and read the Excel file\n",
    "    try:\n",
    "        if download_file.endswith('.csv'):\n",
    "            dpab_df = pd.read_csv(download_file)\n",
    "        else:\n",
    "            raise ValueError(\"Unsupported file format\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error reading the file: {e}\")\n",
    "        continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "685"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "    # Ingest to db, temp table first\n",
    "dpab_df.to_sql('dpab_temp', postgres_engine, schema='pxl_temp', if_exists ='replace', index=False) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    if eachCat == 'PBI src Jira': # please change the file name accordingly here\n",
    "        updateTableQuery = \"\"\"\n",
    "            INSERT INTO external.{table}\n",
    "            SELECT \n",
    "                \"Issue\"::text,\n",
    "                \"Issue created date\"::timestamp,\n",
    "                \"Issue Release Date\"::text,\n",
    "                \"Issue Requestor Division\"::text,\n",
    "                \"Issue Requestor Department\"::text,\n",
    "                \"Issue Release No\"::text,\n",
    "                '{curDate}'::date AS processed_date\n",
    "            FROM pxl_temp.dpab_temp;\n",
    "        \"\"\".format(table=eachCat, curDate=curDate.strftime(\"%Y-%m-%d\"))\n",
    "        \n",
    "        conn.execute(sql.text(updateTableQuery)) \n",
    "\n",
    "    elif eachCat == 'PBI src JPD': # please change the file name accordingly here\n",
    "        updateTableQuery = \"\"\"\n",
    "            INSERT INTO external.{table}\n",
    "            SELECT \n",
    "                \"Issue\"::text,\n",
    "                \"Planned Delivery Date\"::date,\n",
    "                \"First BaseLine\"::text,\n",
    "                \"Transition to status last date\"::text,\n",
    "                \"Issue status\"::text,\n",
    "                \"Issue Segment (IDEA)\"::text,\n",
    "                \"Issue Business Domain (IDEA)\"::text,\n",
    "                \"Issue ISD Dept (IDEA)\"::text,\n",
    "                \"Issue ISD SA (IDEA)\"::text,\n",
    "                \"Issue Complexity (IDEA)\"::text,\n",
    "                \"Issue Qualitative Benefits (IDEA)\"::text,\n",
    "                \"Issue priority\"::text,\n",
    "                \"Issue Total Prioritization - Automation (IDEA)\"::float8,\n",
    "                \"Issue Total Effort - Automation (IDEA)\"::float8,\n",
    "                \"Issue Priority Quadrant (IDEA)\"::text,\n",
    "                '{curDate}'::date AS processed_date\n",
    "            FROM pxl_temp.dpab_temp;\n",
    "        \"\"\".format(table=eachCat, curDate=curDate.strftime(\"%Y-%m-%d\"))\n",
    "        \n",
    "        conn.execute(sql.text(updateTableQuery))\n",
    "\n",
    "\n",
    "    elif eachCat == 'Release Schedule': # please change the file name accordingly here\n",
    "        updateTableQuery = \"\"\"\n",
    "            INSERT INTO external.{table}\n",
    "                SELECT \n",
    "                    \"Issue\"::text,\n",
    "                    \"Deploying Unit\"::text,\n",
    "                    \"Release Type\"::text,\n",
    "                    \"Target CRP/SRS Sign Date\"::date,\n",
    "                    \"Target Fast Track (21-30 days) CRP Sign Date\"::date,\n",
    "                    \"Target Fast Track (<=20 days) CRP Sign Date\"::date,\n",
    "                    \"Version Start Date\"::date,\n",
    "                    \"Version End Date\"::date,\n",
    "                    \"Plan Release Date\"::date,\n",
    "                    \"UAT Final Date (Guideline)\"::date,\n",
    "                    \"CCB Prep Date (Guideline)\"::date,\n",
    "                    \"App Store Approval\"::text,\n",
    "                    \"Plan Deployment Date\"::date,\n",
    "                    \"Actual Deployment Date\"::date,\n",
    "                    \"Version Release Batch\"::text,\n",
    "                    \"Actual Deploy Date\"::date,\n",
    "                    \"Object status\"::text\n",
    "                    '{curDate}'::date AS processed_date\n",
    "            FROM pxl_temp.dpab_temp;\n",
    "        \"\"\".format(table=eachCat, curDate=curDate.strftime(\"%Y-%m-%d\"))\n",
    "\n",
    "except Exception as e:\n",
    "    conn.rollback()  # Rollback the transaction in case of error\n",
    "    print(f\"Error: {e}\")\n",
    "    moveFile(file_url, f.name, sharepoint_path_failed)\n",
    "else:\n",
    "    # Move the processed file to another folder if no exception occurs\n",
    "    moveFile(file_url, f.name, sharepoint_path_processed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Delete df and local file\n",
    "del dpab_df\n",
    "os.remove(download_file)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
